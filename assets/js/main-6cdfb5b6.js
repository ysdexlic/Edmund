/**
 * angular-boilerplate - A boilerplate to start angular projects with
 * @version v0.0.1
 * @link https://github.com/ysdexlic/angular-boilerplate
 * @license MIT
 */
!function(){"use strict";function config($stateProvider,$urlRouterProvider,$logProvider,$httpProvider){$urlRouterProvider.otherwise("/"),$logProvider.debugEnabled(!0),$httpProvider.interceptors.push("httpInterceptor"),$stateProvider.state("root",{})}function MainCtrl($log){$log.debug("MainCtrl laoded!")}function run($log){$log.debug("App is running!")}angular.element(document).ready(function(){angular.bootstrap(document,["app"])}),config.$inject=["$stateProvider","$urlRouterProvider","$logProvider","$httpProvider"],MainCtrl.$inject=["$log"],run.$inject=["$log"],angular.module("app",["ui.router","home","common.services.data","common.directives.version","common.filters.uppercase","common.interceptors.http","templates"]).config(config).run(run).controller("MainCtrl",MainCtrl).value("version","0.0.1")}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.home",{url:"/",views:{"@":{templateUrl:"src/app/home/home.tpl.html",controller:"HomeCtrl as home",resolve:{data:["DataService",function(DataService){return DataService.get()}]}}}})}function HomeCtrl(data){var home=this;home.data=data.data}config.$inject=["$stateProvider"],HomeCtrl.$inject=["data"],angular.module("home",[]).config(config).controller("HomeCtrl",HomeCtrl)}(),function(){"use strict";function versionDirective(version){return{restrict:"A",link:function(scope,elm,attrs){elm.text(version)}}}versionDirective.$inject=["version"],angular.module("common.directives.version",[]).directive("appVersion",versionDirective)}(),function(){"use strict";function httpInterceptor($q,$log){return{request:function(config){return config},requestError:function(rejection){return $log.debug(rejection),$q.reject(rejection)},response:function(response){return $log.debug("response: ",response),response},responseError:function(rejection){return $log.debug(rejection),$q.reject(rejection)}}}httpInterceptor.$inject=["$q","$log"],angular.module("common.interceptors.http",[]).factory("httpInterceptor",httpInterceptor)}(),function(){"use strict";function dataService(){return{get:function(){return["some","data"]}}}angular.module("common.services.data",[]).factory("DataService",dataService)}(),function(){"use strict";function uppercase(){return function(text){return text?text.toUpperCase():text}}angular.module("common.filters.uppercase",[]).filter("uppercase",uppercase)}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/home/home.tpl.html",'<div id="background-wrapper" class="main-content">\n  <div class="social-bar text-center">\n    <ul>\n      <li>\n        <a href="https://www.instagram.com/edmundjefferylive/" target="_blank"><i class="fa fa-instagram" aria-hidden="true"></i></a>\n      </li>\n      <li>\n        <a href="https://www.facebook.com/edmundjefferymusic/" target="_blank"><i class="fa fa-facebook-square" aria-hidden="true"></i></a>\n      </li>\n      <li>\n        <a href="https://twitter.com/EdmundJeffery" target="_blank"><i class="fa fa-twitter-square" aria-hidden="true"></i></a>\n      </li>\n    </ul>\n  </div>\n  <div class="logo-image"></div>\n  <a href="https://geo.itunes.apple.com/us/album/running-ep/id1020403646?mt=1&app=music" target="_blank" id="itunes"></a>\n  <div class="video"></div>\n</div>\n')}])}();
//# sourceMappingURL=data:application/json;base64,